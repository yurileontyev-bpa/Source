@model System.Collections.Generic.List<Microsoft.Teams.Apps.ListSearch.Common.Models.KBInfo>
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Search</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/msteams")
</head>
<body class="surface theme-light">
    <div class="flex-column">
        <!-- Search input and list of results -->
        <div id="searchPanel" class="flex-column flex-1">
            <div class="select-wrapper" tabindex="0" aria-labelledby="comboboxText">
                <button role="combobox" tabindex="-1" class="select" data-toggle="dropdown">
                    <i aria-hidden="true" tabindex="-1" class="icon-base icon-arrowdown"></i>
                    <span id="comboboxText" tabindex="-1" class="placeholder-text">Select the list to search</span>
                </button>
                <ul class="select-items dropdown-menu" tabindex="-1">
                    @foreach (var kb in Model)
                    {
                        <li class="select-item" tabindex="-1" id="@Html.AttributeEncode(@kb.KBId)" data-question-display-name="@Html.AttributeEncode(kb.QuestionFieldDisplayName)">@kb.KBName</li>
                    }
                </ul>
            </div>
            <div id="searchKeywordDiv" class="searchBarDiv" style="display: none">
                <div id="searchLabelDescription" class="labelOverwrite">Search by <span id="searchFieldDisplayName"></span></div>
                <div><i aria-hidden="true" class="icon-base icon-search"></i></div>
                <input id="inpSearchBox" aria-labelledby="searchLabelDescription" placeholder="Search" class="input-field inputSearchBox" />
            </div>
            <div class="flex-column flex-1">
                <div id="loader" style="display: none">
                    @Html.Partial("~/Views/Shared/_Spinner.cshtml")
                </div>
                <div id="resultsList" class="flex-1">
                </div>
                <div id="resultsError" style="display: none" class="flex-1">
                    @Html.Partial("~/Views/Error/ErrorPartial.cshtml")
                </div>
            </div>
            <div class="actionButtonsRow">
                <button class="button-primary" disabled>Share</button>
                <button class="button-secondary" disabled>Back</button>
            </div>
        </div>

        <!-- Result card -->
        <div id="resultPanel" class="flex-column flex-1" aria-live="polite" aria-labelledby="searchDescription searchResultContent" style="display: none">
            <div id="searchDescription" class="resultCardHeading">Searching <span id="searchTerm" class='font-bold'></span> in <span id="searchListName" class='font-bold'></span></div>
            <hr class="resultCardSeparator" />
            <div id="resultCardViewContainer" class="flex-1"></div>
        </div>
    </div>
    <script>
        microsoftTeams.initialize();

        // Set appropriate dark/contrast theme for all the controls based on current theme
        function setTheme(currentTheme) {
            if (currentTheme === "dark") {
                $(".theme-light").addClass("theme-dark").removeClass("theme-light");
            }
            else if (currentTheme === "contrast") {
                $(".theme-light").addClass("theme-contrast").removeClass("theme-light");
            }
        }

        // Parse the query parameters
        function getQueryParameters() {
            let queryParams = {};
            location.search.substr(1).split("&").forEach(function (item) {
                let s = item.split("="),
                    k = s[0],
                    v = s[1] && decodeURIComponent(s[1]);
                queryParams[k] = v;
            });
            return queryParams;
        }

        let params = getQueryParameters();
        let token = params["token"];
        let sessionId = params["sessionId"];
        setTheme(params["theme"]);
    </script>


    <script>
        let doneTypingInterval = @System.Configuration.ConfigurationManager.AppSettings["SearchDelayInMilliseconds"];
        let typingTimer;
        let $input;
        let selectedKbId;           // ID of selected knowledge base
        let currentSearchText = ""; // Current search text

        var KEY_ENTER = 13;
        var KEY_UP = 38;
        var KEY_DOWN = 40;
        var KEY_ESCAPE = 27;
        var KEY_TAB = 9;

        $(function () {
            // Save input box and attach handlers
            $(".select-wrapper").focus();
            $input = $('#inpSearchBox');
            $input.on('keyup', function () {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            });
            $input.on('keydown', function () {
                clearTimeout(typingTimer);
            });

            if ($input.length > 0 && $input.val() != "") {
                doneTyping();
            }

            let kbListItems = $(".select-item");
            if (kbListItems.length === 1) {
                // If there's only 1 item, select it immediately
                selectKnowledgeBase(kbListItems[0]);
            } else {
                // Attach click handlers to combobox items
                kbListItems.on("click", function (event) {
                    selectKnowledgeBase(event.target);
                });
            }
        });

        // Show loading indicator on all AJAX calls
        $(document).ajaxSend(function () {
            $("#loader").show();
            $("#resultsList").hide();
            $("#resultsError").hide();
        });

        // Select knowledge base
        function selectKnowledgeBase(listItemElement) {
            let element = $(listItemElement);
            selectedKbId = element.attr("id");

            let kbName = element.text();
            $("#comboboxText").text(kbName);
            $("#comboboxText").removeClass("placeholder-text");
            $("#searchListName").text(kbName);

            let question = element.attr("data-question-display-name");
            $("#searchFieldDisplayName").text(question);

            $input.val("");
            $("#searchKeywordDiv").show();

            $("#loader").hide();
            $("#resultsList").hide();
            $("#resultsError").hide();
        }

        // Check if the input has changed
        function isSearchTextChanged(text) {
            let trimmedSearchTerm = text && text.trim();
            return trimmedSearchTerm !== $input.val().trim();
        }

        // User is done typing (delay has passed since the last keystroke)
        function doneTyping() {
            // Skip processing if the effective search term hasn't changed
            if (!isSearchTextChanged(currentSearchText)) {
                return;
            }

            currentSearchText = $input.val().trim();
            updateSearchResults(currentSearchText);
        }

        // Update the search results from service
        function updateSearchResults(text) {
            if (text) {
                $.ajax({
                    type: "GET",
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "bearer " + token);
                    },
                    url: '@Url.Action("SearchResults")',
                    data: { searchedKeyword: text, kbId: selectedKbId },
                    success: function (result) {
                        if (!isSearchTextChanged(text)) {       // Don't update result if the user has changed the search term
                            $("#resultsList").html(result);
                            $("#loader").hide();
                            $("#resultsList").show();
                            $("#resultsError").hide();
                        }
                    },
                    error: function () {
                        if (!isSearchTextChanged(text)) {
                            $("#loader").hide();
                            $("#resultsList").hide();
                            $("#resultsError").show();
                        }
                    }
                });
            } else {
                $("#resultsList").html("");
            }
        }

        // Handle click on a search result
        function listItemClick(answer, question, id) {
            let payload = {
                kbId: selectedKbId,
                answer: answer,
                question: question,
                id: id,
            }
             $.ajax({
                type: "POST",
                url: '@Url.Action("ResultCardPartial")',
                data: payload,
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "bearer " + token);
                },
                success: function (result) {
                    $("#searchPanel").hide();
                    $("#resultPanel").show();

                    $("#resultCardViewContainer").html(result);
                    $("#searchTerm").text(currentSearchText);
                },
                error: function () {
                    $("#loader").hide();
                    $("#resultsList").hide();
                    $("#resultsError").show();
                }
            });
        }

        // Navigate back to the search results list
        function goBackToSearchResults() {
            $("#searchPanel").show();
            $("#resultPanel").hide();

            $("#loader").hide();
            $("#resultsList").show();
            $("#resultsError").hide();
            doneTyping();
        }

        // Share the selected card
        function shareCard(card) {
            card["sessionId"] = sessionId;
            microsoftTeams.tasks.submitTask(JSON.stringify(card));
        }

        //Event to expand the dropdown items when user press the enter key and focus the first item
        $(".select-wrapper").on("keydown", function (event) {
            event.stopPropagation();
            var combobox = $(this);
            if (event.which === KEY_ENTER || event.which === KEY_DOWN) {
                if (combobox.find("button").attr("aria-expanded") != "true") {
                    combobox.find("button").click();                    
                }
                $(".dropdown-menu>li").first().focus();
            }

            if (event.which === KEY_TAB || event.which === KEY_ESCAPE) {
                if (combobox.find("button").attr("aria-expanded") == "true") {
                    combobox.find("button").click();
                    combobox.focus();
                }
            }
        });

        // Event to navigate the list items with up and down arrows and to select the list item with enter key
        $(".dropdown-menu>li").on("keydown", function (event) {
            event.stopPropagation();
            var liElement = $(this);
            switch (event.which) {
                case KEY_ENTER: // Enter key
                    liElement.click();
                    break;
                case KEY_UP: // Up arrow key
                    liElement.prev().focus();
                    if (liElement.prev().length === 0) {
                        liElement.nextAll().focus();
                        event.preventDefault();
                    }
                    break;
                case KEY_DOWN: // Down arrow key
                    liElement.next().focus();
                    if (liElement.next().length === 0) {
                        liElement.prevAll().focus();
                        event.preventDefault();
                    }
                    break;
                case KEY_ESCAPE:
                case KEY_TAB:
                    var combobox = $(".select-wrapper");
                    if (combobox.find("button").attr("aria-expanded") == "true") {
                        combobox.find("button").click();
                        combobox.focus();
                    }
                    break;

            }
        });
    </script>
</body>
</html>